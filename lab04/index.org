#+STARTUP: showall
#+STARTUP: lognotestate
#+TAGS:
#+SEQ_TODO: TODO STARTED DONE DEFERRED CANCELLED | WAITING DELEGATED APPT
#+DRAWERS: HIDDEN STATE
#+TITLE: AES encryption/decryption using different modes
#+CATEGORY: todo

* AES and Encryption Modes 

AES is a widely used cipher with no known vulnerabilities. But, like any block cipher, it needs to be used with a block encryption mode.  As the Wikipedia
states: /A block cipher by itself is only suitable for the secure cryptographic transformation (encryption or decryption) of one fixed-length group of bits called a block. A mode of operation describes how to repeatedly apply a cipher's single-block operation to securely transform amounts of data larger than a block/.

In this lab we will learn how to use the [[https://www.dlitz.net/software/pycrypto/][pycrypto]] implementation of AES and we will implement a couple of modes.

* Install pycrypt

I am not sure if the pycrypt library would be installed by the time of this lab. So we might need to install it

Try the following code:

#+BEGIN_SRC
from Crypto import Random

rndfile = Random.new()
a = rndfile.read(16)
print a.encode('hex')
#+END_SRC

If this program does not work, you need to install the library in your home directory. It is installed, skip the next section.

#+BEGIN_SRC
mkdir -p ~/python/lib/python2.6/site-packages
#+END_SRC

Add this to your =.bash_profile=

#+BEGIN_SRC
export PYTHONPATH=${HOME}/python/lib/python2.6/site-packages
#+END_SRC

Logut and login again. Now install pycrypto.

#+BEGIN_SRC
easy_install --prefix=${HOME}/python pycrypto
#+END_SRC

After this last command, you should be able to run test code above.  You will receive a vulnerability warning every time you use the library. We will ignore
this message.

* The files

From connex, download the files for this lab. They include:

- =aes-ecb.ct=. Message encrypted using AES using Electronic Code Book mode.
- =aes-cbc.ct=. Message encrypted using AES using Cipher Block Chaining mode.
- =aes-ctr.ct=. Message encrypted using AES using Counter mode.
- =aes-ofb.ct=. Message encrypted using AES using Output FeedBack mode.

For the sake of simplicity, we will use for IV a sequence of 0 bits (16 bytes). For Counter mode, the nonce is zero and the counter starts at zero. As you know, this information is public.
The secret key is the same for all files is =Our true secret.= (128 bit long). All of these files contain the exact same message encoded.

* Answer the following questions.

- Look at the file encoded in Electronic Code Book mode. As discussed in class, ECB has a major vulnerability. Can you find a repeated block? What does this vulnerability disclose about the original message.
- Look at the first encoded block in the four files. What files have the same first block? Why? (look at the definition of the different modes in the  Wikipedia entry "Block cipher mode of operation").
- How do you avoid this problem?

*Hint*. Write a simple python program that dumps the message in hex, one block at a time.

* Decrypt the files

Read the documentation of pycrypto and decode the original files.  Save all decrypted messages into files the same basename with extension =.txt= instead of =.ct=. Call this program =decrypt.py=

** Hints

- Create a cipher object for each file. Do not reuse the same cipher object for different messages.
- The  size of the block is 16 bytes. This means the size of IV should be 16 bytes, all zeroes.
- The counter mode requires a counter parameter. Use a =Crypto.Util.Counter= object initialized to zero.
- Open the files in *binary mode*.
- They all contain the same message. Hence, all decrypted files should be identical.


* Implementing Cipher Block Chaining (CBC) mode

Electronic Code Book (ECB) is the simplest mode. We can use it to implement any of the other ones. Using only ECB mode, implement CBC. In other words, encrypt
the message file using the same key and IV as before, but without using the =AES.MODE_CBC= parameter. Instead, use only =AES.MODE_ECB=. Test your implementation
by trying to encode the original message with your implementation. Your output should be identical to =aes-cbc.ct=. This program should be called =my-cbc.py=.

** Hint

Look at the description of the encoding modes in the Wikipedia entry "Block cipher mode of operation"

* Implementing Output Feedback Mode (OFB) mode

As with CBC, implement OFB. This program should be called =my-ofb.py=.

* What to submit

In a zip file, submit:

- The original message file: =message.txt=
- Your implementation for decryption: =decrypt.py=
- Your implementation for CBC mode: =my-cbc.py=
- Your implementation for OFB mode: =my-ofb.py=
- Your answer to the questions in a test file: =answers.txt=
