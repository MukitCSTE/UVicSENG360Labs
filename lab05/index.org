#+STARTUP: showall
#+STARTUP: lognotestate
#+TAGS:
#+SEQ_TODO: TODO STARTED DONE DEFERRED CANCELLED | WAITING DELEGATED APPT
#+DRAWERS: HIDDEN STATE
#+TITLE: Certificates and Certificate Authorities
#+CATEGORY: todo


* Introduction

As we have seen, symmetric cryptography can be effective, but it has the problem of key-distribution (it requires a pair of keys for every pair of entities
wishing to communicate). Public key cryptography alleviates this. Nonetheless, it is still necessary to distribute keys, and equally important, to be able to
authenticate the entity (person or process) we communicate with.

Public Key Infrastructure (PKI) is a mechanism to do solve these problems. The basic premise is that any entity in the system should have a valid certificate
that identifies the entity. The certificate is signed by a certificate authority, validating the entity. Go to the Wikipedia and read about them:
http://en.wikipedia.org/wiki/Public_key_infrastructure and http://en.wikipedia.org/wiki/Certificate_authority

* Certificates and SSL/TLS

SSL (and its successor TLS) is the protocol behind the secure Web can use certificates for authentication purposes. It is based on the idea of "Root
Certification Authorities" (Root CAs). These CAs (see http://en.wikipedia.org/wiki/Certificate_authority#Providers) sign certificates of organizations. Then
such organizations sign certificates of its entities.  In order to verify a certificate we verify the chain of signatures in those certificates: is the
certificate in question signed by a valid CA?  If not, was it signed by a CA that was signed by a known CA? We do this recursively until the certificate is
signed by a CA, or we cannot further verify the signature. Anybody with a signed certificate can sign other certificates.

However, having a certificate signed by a Root CA costs money (see http://www.thawte.com/ssl/index.html). What is even worse is that these certificates are only
valid for one year. Talk about printing money!

* Web and CAs

If you are going to do e-commerce you must buy a valid CA from one of the Web CAs. There is no way around it, unfortunately. This will allow any browser to
authenticate your server (to this day the practice is that we don't authenticate users, only servers, one day this might change).

Start firefox and go to http://mail.uvic.ca. Click on the icon just before the URL (looks like a globe--world). Click on "More Information". Under "Technical
Details" it will tell you that  the connection is not encrypted. This is expected.

Now head to https://mail.uvic.ca. Click again on the icon (this time a small lock with a grey triangle with an exclamation point).  

/Question 1./ Who is its Signing CA?

Now visit https://sail.cs.queensu.ca/

/Question 2./  What is the problem with this site?

* Using openSSL to verify certificates.

OpenSSL is a library but it is also a collection of tools. Download the certificates of the two sites above using it. Port 443 is https.

#+BEGIN_EXAMPLE
echo -n | openssl s_client -connect <hostname>:443 
#+END_EXAMPLE

/Question 3./ Who is the issuer of each certificate?

As you can see, one of them comes from a CA and the other is self-signed. More on that later.

Save the certificate of /mail.uvic.ca/ into a file =uvic.cert=. It starts with =-----BEGIN CERTIFICATE-----= and ends with =-----END CERTIFICATE-----== included.

* Verifying a certificate

Run openssl with these options on the two servers (sail and mail).

#+BEGIN_EXAMPLE
echo -n | openssl s_client  -verify_return_error -connect <hostname>:443 
#+END_EXAMPLE

The Certificate chain is the way in which the certification is verified. 

* Encryption used by a server and a client

At the end of the output of openssl you see the description of the encryption achieved. SSL negotiates and uses the best encryption that both sides (client and
server) are able to support. This is stated in the =Cipher= field of the SSL-session data.

/Question 4./ What is the cipher achieved between the Lab machine you are using and the following servers: mail.uvic.ca, www.gmail.com, and facebook. 

The cipher is "encoded". See https://www.openssl.org/docs/apps/ciphers.html for details. The cipher reported is an abbreviation (see bottom of page for the full
name). Each section of the cipher documents one part of it. At the very least it has two parts. From the right: first is the MAC, then the block cipher or
stream cipher used and its blocking mode (if applicable). Then it comes the authentication method, and finally, the key exchange algorithm.

/Question 5./ For each of the three servers, decode the cipher method into each of its sections. 

/Question 6./ Compare the three ciphers. Then Read this: http://blogs.technet.com/b/srd/archive/2013/11/12/security-advisory-2868725-recommendation-to-disable-rc4.aspx
What conclusion do you reach about UVic cipher?

* Self-signing your own certificates

There are many reasons why we might want to sign our own certificates (saving money is one of them). For example, I run my own VPN client, and it uses TLS to
authenticate the client and the server. To learn to do this follow the tutorial here: http://pki-tutorial.readthedocs.org/en/latest/simple

* What to Submit

The answers to the five questions above.



